{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nvar storeToken = function storeToken(value) {\n  return _regeneratorRuntime.async(function storeToken$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('token', value));\n\n        case 3:\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nvar getToken = function getToken() {\n  var token;\n  return _regeneratorRuntime.async(function getToken$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n        case 3:\n          token = _context2.sent;\n\n          if (!(token !== null)) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", token);\n\n        case 6:\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar removeToken = function removeToken(value) {\n  return _regeneratorRuntime.async(function removeToken$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(value));\n\n        case 3:\n          _context3.next = 8;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nexport { storeToken, getToken, removeToken };","map":{"version":3,"sources":["F:/js-files/dev_students/ReactNativeAuthUI1/services/AsyncStorageService.js"],"names":["AsyncStorage","storeToken","value","setItem","console","log","getToken","getItem","token","removeToken","removeItem"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,2CAAzB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAETF,YAAY,CAACG,OAAb,CAAqB,OAArB,EAA8BD,KAA9B,CAFS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIfE,UAAAA,OAAO,CAACC,GAAR;;AAJe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAOA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEON,YAAY,CAACO,OAAb,CAAqB,OAArB,CAFP;;AAAA;AAEPC,UAAAA,KAFO;;AAAA,gBAGTA,KAAK,KAAK,IAHD;AAAA;AAAA;AAAA;;AAAA,4CAIJA,KAJI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAObJ,UAAAA,OAAO,CAACC,GAAR;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAUA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAAOP,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEVF,YAAY,CAACU,UAAb,CAAwBR,KAAxB,CAFU;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIhBE,UAAAA,OAAO,CAACC,GAAR;;AAJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAQA,SAASJ,UAAT,EAAqBK,QAArB,EAA+BG,WAA/B","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst storeToken = async (value) => {\r\n  try {\r\n    await AsyncStorage.setItem('token', value)\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nconst getToken = async () => {\r\n  try {\r\n    const token = await AsyncStorage.getItem('token')\r\n    if (token !== null) {\r\n      return token\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nconst removeToken = async (value) => {\r\n  try {\r\n    await AsyncStorage.removeItem(value)\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport { storeToken, getToken, removeToken }"]},"metadata":{},"sourceType":"module"}