{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport React, { useState, useEffect } from 'react';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { styles, toastConfig } from \"../../../style\";\nimport Toast from 'react-native-toast-message';\nimport { useChangeUserPasswordMutation } from \"../../../services/userAuthApi\";\nimport { getToken } from \"../../../services/AsyncStorageService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ChangePasswordScreen = function ChangePasswordScreen() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password_confirmation = _useState4[0],\n      setPassword_confirmation = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userLToken = _useState6[0],\n      setUserLToken = _useState6[1];\n\n  var clearTextInput = function clearTextInput() {\n    setPassword('');\n    setPassword_confirmation('');\n  };\n\n  var _useChangeUserPasswor = useChangeUserPasswordMutation(),\n      _useChangeUserPasswor2 = _slicedToArray(_useChangeUserPasswor, 1),\n      changeUserPassword = _useChangeUserPasswor2[0];\n\n  useEffect(function () {\n    (function _callee() {\n      var token;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getToken());\n\n            case 2:\n              token = _context.sent;\n              setUserLToken(token);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  });\n\n  var handleFormSubmit = function handleFormSubmit() {\n    var formdata, res;\n    return _regeneratorRuntime.async(function handleFormSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(password && password_confirmation)) {\n              _context2.next = 14;\n              break;\n            }\n\n            if (!(password === password_confirmation)) {\n              _context2.next = 11;\n              break;\n            }\n\n            formdata = {\n              password: password,\n              password_confirmation: password_confirmation\n            };\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(changeUserPassword({\n              formdata: formdata,\n              userLToken: userLToken\n            }));\n\n          case 5:\n            res = _context2.sent;\n            console.log(res);\n\n            if (res.data.status === \"success\") {\n              clearTextInput();\n              Toast.show({\n                type: 'done',\n                position: 'top',\n                topOffset: 0,\n                text1: 'Password Changed Successfully'\n              });\n            }\n\n            if (res.data.status === \"failed\") {\n              Toast.show({\n                type: 'warning',\n                position: 'top',\n                topOffset: 0,\n                text1: res.data.message\n              });\n            }\n\n            _context2.next = 12;\n            break;\n\n          case 11:\n            Toast.show({\n              type: 'warning',\n              position: 'top',\n              topOffset: 0,\n              text1: \"New Password and Confirm New Password doesn't match\"\n            });\n\n          case 12:\n            _context2.next = 15;\n            break;\n\n          case 14:\n            Toast.show({\n              type: 'warning',\n              position: 'top',\n              topOffset: 0,\n              text1: 'All Fields are Required'\n            });\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: {\n      marginTop: 30\n    },\n    keyboardShouldPersistTaps: \"handled\",\n    children: [_jsx(View, {\n      children: _jsx(Toast, {\n        config: toastConfig\n      })\n    }), _jsxs(View, {\n      style: styleOne.container,\n      children: [_jsx(View, {\n        children: _jsx(TextInput, {\n          style: styleOne.input,\n          value: password,\n          onChangeText: setPassword,\n          placeholder: \"Write Your New Password\",\n          placeholderTextColor: \"gray\",\n          secureTextEntry: true\n        })\n      }), _jsx(View, {\n        style: styles.inputWithLabel,\n        children: _jsx(TextInput, {\n          style: styleOne.input,\n          value: password_confirmation,\n          onChangeText: setPassword_confirmation,\n          placeholder: \"Write Your New Confirm Password\",\n          placeholderTextColor: \"gray\",\n          secureTextEntry: true\n        })\n      }), _jsx(View, {\n        style: {\n          width: 200,\n          alignSelf: 'center',\n          margin: 10\n        },\n        children: _jsx(TouchableOpacity, {\n          onPress: handleFormSubmit,\n          style: {\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            padding: 15,\n            marginVertical: 5,\n            borderRadius: 50,\n            fontWeight: \"bold\",\n            backgroundColor: \"#5062BD\",\n            elevation: 1\n          },\n          children: _jsx(Text, {\n            style: {\n              color: \"white\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            },\n            children: \"Save\"\n          })\n        })\n      })]\n    })]\n  });\n};\n\nvar styleOne = StyleSheet.create({\n  input: {\n    backgroundColor: \"transparent\",\n    width: \"90%\",\n    padding: 15,\n    fontSize: 14,\n    fontWeight: \"400\",\n    borderBottomColor: \"gray\",\n    borderBottomWidth: 1,\n    marginBottom: 10,\n    marginLeft: 20\n  }\n});\nexport default ChangePasswordScreen;","map":{"version":3,"sources":["F:/js-files/dev_students/ReactNativeAuthUI1/app/screen/auth/ChangePasswordScreen.js"],"names":["React","useState","useEffect","SafeAreaView","styles","toastConfig","Toast","useChangeUserPasswordMutation","getToken","ChangePasswordScreen","password","setPassword","password_confirmation","setPassword_confirmation","userLToken","setUserLToken","clearTextInput","changeUserPassword","token","handleFormSubmit","formdata","res","console","log","data","status","show","type","position","topOffset","text1","message","marginTop","styleOne","container","input","inputWithLabel","width","alignSelf","margin","justifyContent","alignItems","padding","marginVertical","borderRadius","fontWeight","backgroundColor","elevation","color","StyleSheet","create","fontSize","borderBottomColor","borderBottomWidth","marginBottom","marginLeft"],"mappings":"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","sourcesContent":["import { View, Text, Button,TouchableOpacity,StyleSheet, TextInput, ScrollView } from 'react-native'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport { styles, toastConfig } from '../../../style';\r\nimport Toast from 'react-native-toast-message';\r\nimport { useChangeUserPasswordMutation } from '../../../services/userAuthApi';\r\nimport { getToken } from '../../../services/AsyncStorageService'\r\n\r\nconst ChangePasswordScreen = () => {\r\n  const [password, setPassword] = useState(\"\")\r\n  const [password_confirmation, setPassword_confirmation] = useState(\"\")\r\n  const [userLToken, setUserLToken] = useState()\r\n\r\n  const clearTextInput = () => {\r\n    setPassword('')\r\n    setPassword_confirmation('')\r\n  }\r\n\r\n  const [changeUserPassword] = useChangeUserPasswordMutation()\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const token = await getToken() // Getting Token from Storage\r\n      setUserLToken(token)          // Store Token in Local State\r\n    })();\r\n  })\r\n\r\n  const handleFormSubmit = async () => {\r\n    if (password && password_confirmation) {\r\n      if (password === password_confirmation) {\r\n        const formdata = { password, password_confirmation }\r\n        const res = await changeUserPassword({ formdata, userLToken })\r\n        console.log(res)\r\n        if (res.data.status === \"success\") {\r\n          clearTextInput()\r\n          Toast.show({\r\n            type: 'done',\r\n            position: 'top',\r\n            topOffset: 0,\r\n            text1: 'Password Changed Successfully'\r\n          });\r\n        }\r\n        if (res.data.status === \"failed\") {\r\n          Toast.show({\r\n            type: 'warning',\r\n            position: 'top',\r\n            topOffset: 0,\r\n            text1: res.data.message\r\n          });\r\n        }\r\n      } else {\r\n        Toast.show({\r\n          type: 'warning',\r\n          position: 'top',\r\n          topOffset: 0,\r\n          text1: \"New Password and Confirm New Password doesn't match\"\r\n        });\r\n      }\r\n    } else {\r\n      Toast.show({\r\n        type: 'warning',\r\n        position: 'top',\r\n        topOffset: 0,\r\n        text1: 'All Fields are Required'\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    \r\n\r\n      <View style={{ marginTop: 30}} keyboardShouldPersistTaps='handled'>\r\n      <View>\r\n          <Toast config={toastConfig} />\r\n          </View>\r\n\r\n        <View style={styleOne.container}>\r\n\r\n          <View>\r\n            <TextInput\r\n              style={styleOne.input}\r\n              value={password}\r\n              onChangeText={setPassword}\r\n              placeholder=\"Write Your New Password\"\r\n              placeholderTextColor=\"gray\"\r\n              secureTextEntry={true}\r\n            />\r\n          </View>\r\n          <View style={styles.inputWithLabel}>\r\n            <TextInput\r\n              style={styleOne.input}\r\n              value={password_confirmation}\r\n              onChangeText={setPassword_confirmation}\r\n              placeholder=\"Write Your New Confirm Password\"\r\n              placeholderTextColor=\"gray\"\r\n              secureTextEntry={true}\r\n            />\r\n          </View>\r\n          <View style={{ width: 200, alignSelf: 'center', margin: 10 }}>\r\n            {/* <Button title=\"Save\" onPress={handleFormSubmit} color='purple' /> */}\r\n            <TouchableOpacity\r\n              onPress={handleFormSubmit}\r\n              style={{\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                padding: 15,\r\n                marginVertical: 5,\r\n                borderRadius: 50,\r\n                fontWeight: \"bold\",\r\n                backgroundColor: \"#5062BD\",\r\n                elevation: 1,\r\n              }}\r\n            >\r\n              <Text\r\n                style={{\r\n                  color: \"white\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                Save\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n        \r\n      </View>\r\n  )\r\n}\r\n\r\n\r\nconst styleOne = StyleSheet.create({\r\n  input: {\r\n    backgroundColor: \"transparent\",\r\n    width: \"90%\",\r\n    padding: 15,\r\n    fontSize: 14,\r\n    fontWeight: \"400\",\r\n    borderBottomColor: \"gray\",\r\n    borderBottomWidth: 1,\r\n    marginBottom: 10,\r\n    marginLeft: 20\r\n  },\r\n \r\n});\r\nexport default ChangePasswordScreen"]},"metadata":{},"sourceType":"module"}