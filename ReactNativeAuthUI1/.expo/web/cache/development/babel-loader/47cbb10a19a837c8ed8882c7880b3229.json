{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport var userAuthApi = createApi({\n  reducerPath: 'userAuthApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://192.168.10.6:8000/api/user/'\n  }),\n  endpoints: function endpoints(builder) {\n    return {\n      registerUser: builder.mutation({\n        query: function query(user) {\n          return {\n            url: 'register',\n            method: 'POST',\n            body: user,\n            headers: {\n              'Content-type': 'application/json'\n            }\n          };\n        }\n      }),\n      registerSchoolAdmin: builder.mutation({\n        query: function query(schooladmin) {\n          return {\n            url: 'schooladmin',\n            method: 'POST',\n            body: schooladmin,\n            headers: {\n              'Content-type': 'application/json'\n            }\n          };\n        }\n      }),\n      schoolAdminLogin: builder.mutation({\n        query: function query(schooladmin) {\n          return {\n            url: 'schoolAdminlogin',\n            method: 'POST',\n            body: schooladmin,\n            headers: {\n              'Content-type': 'application/json'\n            }\n          };\n        }\n      }),\n      loggedSchoolAdmin: builder.query({\n        query: function query(token) {\n          return {\n            url: 'loggedSchoolAdmin',\n            method: 'GET',\n            headers: {\n              'authorization': \"Bearer \" + token\n            }\n          };\n        }\n      }),\n      registerStudent: builder.mutation({\n        query: function query(student) {\n          return {\n            url: 'createstudent',\n            method: 'POST',\n            body: student,\n            headers: {\n              'Content-type': 'application/json'\n            }\n          };\n        }\n      }),\n      getStudent: builder.query({\n        query: function query() {\n          return {\n            url: 'getstudent',\n            method: 'GET'\n          };\n        }\n      }),\n      studentattendance: builder.mutation({\n        query: function query(any) {\n          return {\n            url: 'studentattendance',\n            method: 'POST',\n            body: any,\n            headers: {\n              'Content-type': 'application/json'\n            }\n          };\n        }\n      }),\n      loginUser: builder.mutation({\n        query: function query(user) {\n          return {\n            url: 'login',\n            method: 'POST',\n            body: user,\n            headers: {\n              'Content-type': 'application/json'\n            }\n          };\n        }\n      }),\n      getLoggedUser: builder.query({\n        query: function query(token) {\n          return {\n            url: 'loggeduser',\n            method: 'GET',\n            headers: {\n              'authorization': \"Bearer \" + token\n            }\n          };\n        }\n      }),\n      sendPasswordResetEmail: builder.mutation({\n        query: function query(user) {\n          return {\n            url: 'send-reset-password-email',\n            method: 'POST',\n            body: user,\n            headers: {\n              'Content-type': 'application/json'\n            }\n          };\n        }\n      }),\n      changeUserPassword: builder.mutation({\n        query: function query(_ref) {\n          var formdata = _ref.formdata,\n              userLToken = _ref.userLToken;\n          return {\n            url: 'changepassword',\n            method: 'POST',\n            body: formdata,\n            headers: {\n              'authorization': \"Bearer \" + userLToken\n            }\n          };\n        }\n      }),\n      registerTeachers: builder.mutation({\n        query: function query(teacher) {\n          return {\n            url: 'registerTeacher',\n            method: 'POST',\n            body: teacher,\n            headers: {\n              'Content-type': 'application/json'\n            }\n          };\n        }\n      }),\n      loginTeacher: builder.mutation({\n        query: function query(teacher) {\n          return {\n            url: 'teachersLogin',\n            method: 'POST',\n            body: teacher,\n            headers: {\n              'Content-type': 'application/json'\n            }\n          };\n        }\n      }),\n      getLoggedTeachers: builder.query({\n        query: function query(token) {\n          return {\n            url: 'loggedTeachers',\n            method: 'GET',\n            headers: {\n              'authorization': \"Bearer \" + token\n            }\n          };\n        }\n      }),\n      getTeachers: builder.query({\n        query: function query() {\n          return {\n            url: 'getTeachers',\n            method: 'GET'\n          };\n        }\n      })\n    };\n  }\n});\nvar useLoginTeacherMutation = userAuthApi.useLoginTeacherMutation,\n    useRegisterTeachersMutation = userAuthApi.useRegisterTeachersMutation,\n    useRegisterUserMutation = userAuthApi.useRegisterUserMutation,\n    useRegisterSchoolAdminMutation = userAuthApi.useRegisterSchoolAdminMutation,\n    useSchoolAdminLoginMutation = userAuthApi.useSchoolAdminLoginMutation,\n    useLoggedSchoolAdminQuery = userAuthApi.useLoggedSchoolAdminQuery,\n    useGetLoggedTeachersQuery = userAuthApi.useGetLoggedTeachersQuery,\n    useRegisterStudentMutation = userAuthApi.useRegisterStudentMutation,\n    useLoginUserMutation = userAuthApi.useLoginUserMutation,\n    useGetLoggedUserQuery = userAuthApi.useGetLoggedUserQuery,\n    useGetStudentQuery = userAuthApi.useGetStudentQuery,\n    useSendPasswordResetEmailMutation = userAuthApi.useSendPasswordResetEmailMutation,\n    useChangeUserPasswordMutation = userAuthApi.useChangeUserPasswordMutation,\n    useGetTeachersQuery = userAuthApi.useGetTeachersQuery;\nexport { useLoginTeacherMutation, useRegisterTeachersMutation, useRegisterUserMutation, useRegisterSchoolAdminMutation, useSchoolAdminLoginMutation, useLoggedSchoolAdminQuery, useGetLoggedTeachersQuery, useRegisterStudentMutation, useLoginUserMutation, useGetLoggedUserQuery, useGetStudentQuery, useSendPasswordResetEmailMutation, useChangeUserPasswordMutation, useGetTeachersQuery };","map":{"version":3,"sources":["F:/js-files/dev_students/ReactNativeAuthUI1/services/userAuthApi.js"],"names":["createApi","fetchBaseQuery","userAuthApi","reducerPath","baseQuery","baseUrl","endpoints","builder","registerUser","mutation","query","user","url","method","body","headers","registerSchoolAdmin","schooladmin","schoolAdminLogin","loggedSchoolAdmin","token","registerStudent","student","getStudent","studentattendance","any","loginUser","getLoggedUser","sendPasswordResetEmail","changeUserPassword","formdata","userLToken","registerTeachers","teacher","loginTeacher","getLoggedTeachers","getTeachers","useLoginTeacherMutation","useRegisterTeachersMutation","useRegisterUserMutation","useRegisterSchoolAdminMutation","useSchoolAdminLoginMutation","useLoggedSchoolAdminQuery","useGetLoggedTeachersQuery","useRegisterStudentMutation","useLoginUserMutation","useGetLoggedUserQuery","useGetStudentQuery","useSendPasswordResetEmailMutation","useChangeUserPasswordMutation","useGetTeachersQuery"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\nexport const userAuthApi = createApi({\r\n  reducerPath: 'userAuthApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'http://192.168.10.6:8000/api/user/'\r\n  }),\r\n  endpoints: (builder) => ({\r\n    registerUser: builder.mutation({\r\n      query: (user) => {\r\n        return {\r\n          url: 'register',\r\n          method: 'POST',\r\n          body: user,\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n          }\r\n        }\r\n      }\r\n    }),\r\n\r\n    registerSchoolAdmin: builder.mutation({\r\n      query: (schooladmin) => {\r\n        return {\r\n          url: 'schooladmin',\r\n          method: 'POST',\r\n          body: schooladmin,\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n          }\r\n        }\r\n      }\r\n    }),\r\n\r\n    schoolAdminLogin: builder.mutation({\r\n      query: (schooladmin) => {\r\n        return {\r\n          url: 'schoolAdminlogin',\r\n          method: 'POST',\r\n          body: schooladmin,\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n          }\r\n        }\r\n      }\r\n    }),\r\n\r\n    loggedSchoolAdmin: builder.query({\r\n      query: (token) => ({\r\n        url: 'loggedSchoolAdmin',\r\n        method: 'GET',\r\n        headers: {\r\n          'authorization': `Bearer ${token}`,\r\n        },\r\n      })\r\n    }),\r\n\r\n    registerStudent : builder.mutation({\r\n      query: (student) => {\r\n        return {\r\n          url: 'createstudent',\r\n          method: 'POST',\r\n          body: student,\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n          }\r\n        }\r\n      }\r\n    }),\r\n\r\n    getStudent: builder.query({\r\n      query: () => ({\r\n        url: 'getstudent',\r\n        method: 'GET',\r\n      })\r\n    }),\r\n\r\n    studentattendance : builder.mutation({\r\n      query: (any) => {\r\n        return {\r\n          url: 'studentattendance',\r\n          method: 'POST',\r\n          body: any,\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n          }\r\n        }\r\n      }\r\n    }),\r\n\r\n\r\n\r\n\r\n\r\n    loginUser: builder.mutation({\r\n      query: (user) => {\r\n        return {\r\n          url: 'login',\r\n          method: 'POST',\r\n          body: user,\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n          }\r\n        }\r\n      }\r\n    }),\r\n    getLoggedUser: builder.query({\r\n      query: (token) => ({\r\n        url: 'loggeduser',\r\n        method: 'GET',\r\n        headers: {\r\n          'authorization': `Bearer ${token}`,\r\n        },\r\n      })\r\n    }),\r\n    sendPasswordResetEmail: builder.mutation({\r\n      query: (user) => {\r\n        return {\r\n          url: 'send-reset-password-email',\r\n          method: 'POST',\r\n          body: user,\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n          }\r\n        }\r\n      }\r\n    }),\r\n    changeUserPassword: builder.mutation({\r\n      query: ({ formdata, userLToken }) => {\r\n        return {\r\n          url: 'changepassword',\r\n          method: 'POST',\r\n          body: formdata,\r\n          headers: {\r\n            'authorization': `Bearer ${userLToken}`,\r\n          }\r\n        }\r\n      }\r\n    }),\r\n\r\n    // TEACHER SECTION \r\n    registerTeachers : builder.mutation({\r\n      query: (teacher) => {\r\n        return {\r\n          url: 'registerTeacher',\r\n          method: 'POST',\r\n          body: teacher,\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n          }\r\n        }\r\n      }\r\n    }),\r\n\r\n    loginTeacher: builder.mutation({\r\n      query: (teacher) => {\r\n        return {\r\n          url: 'teachersLogin',\r\n          method: 'POST',\r\n          body: teacher,\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n          }\r\n        }\r\n      }\r\n    }),\r\n\r\n    getLoggedTeachers: builder.query({\r\n      query: (token) => ({\r\n        url: 'loggedTeachers',\r\n        method: 'GET',\r\n        headers: {\r\n          'authorization': `Bearer ${token}`,\r\n        },\r\n      })\r\n    }),\r\n\r\n    getTeachers: builder.query({\r\n      query: () => ({\r\n        url: 'getTeachers',\r\n        method: 'GET',\r\n        \r\n      })\r\n    }),\r\n\r\n  }),\r\n})\r\n\r\nexport const {useLoginTeacherMutation,useRegisterTeachersMutation, useRegisterUserMutation,useRegisterSchoolAdminMutation, useSchoolAdminLoginMutation, useLoggedSchoolAdminQuery, useGetLoggedTeachersQuery, useRegisterStudentMutation , useLoginUserMutation, useGetLoggedUserQuery, useGetStudentQuery , useSendPasswordResetEmailMutation, useChangeUserPasswordMutation, useGetTeachersQuery } = userAuthApi\r\n"]},"metadata":{},"sourceType":"module"}